#!/usr/bin/bash -x
#!/usr/bin/env -iS bash -x
# shellcheck disable=SC2316,SC2312

# entire notion of "a single function for setting up a set of command
# shadows" violates the entire principle of 'separation of data and
# code.'



:;: 'Regular users only, and -sudo- required' :;:

if [[ "${UID}" == 0 ]]; then
  printf '\n\t Must be a regular user and use sudo. \n\n'
  exit 1

elif ! sudo -v; then
  printf '\n\t Validation failed of user\x27s \x60sudo\x60 timestamp. '
  printf 'Exiting.\n\n'
  exit "${LINENO}"
fi



:;: 'Target string:' :;:
x='export'



:;: 'Variables, functions and umask' :;:

declare -p PATH

: 'Set up testing of PATH dirs' :
IFS=':' read -ra find_path <<< "${PATH}"
declare -p find_path
for d in "${!find_path[@]}"; do
  if [[ "${find_path[d]}" == /usr/bin ]]; then
    unset 'find_path[d]'
  fi; :
done; unset d; :
find_path=("${find_path[@]}")

file_names=([0]="${x}" [1]="${x}_symlink" [2]="${x}_hardlink" 
  [3]="${x}_dangling_symlink"
)
for fnm in "${file_names[@]}"; do
  for dnm in "${find_path[@]}"; do
    nm="${dnm}/${fnm}"
    if [[ -f "${nm}" ]] \
      || [[ -L "${nm}" ]]
    then
      rm -f i--one-file-system --preserve-root=all -- "${nm}" \
        || fn_erx
    fi; unset nm; :
  done; unset dnm; :
done; unset fnm; :

: 'Set up testing of PATH dirs and files' :
xfa="/usr/bin/${file_names[0]}"
xfb="${find_path[0]}/${file_names[1]}"
xfc="${find_path[1]}/${file_names[2]}"
xfd="${find_path[2]}/${file_names[0]}"
xfe="${find_path[3]}/${file_names[3]}"
xff=("${xfa}" "${xfb}" "${xfc}" "${xfd}" "${xfe}")

function fn_erx(){
  # shellcheck disable=SC2319
  local ec="${?}"
  echo ERROR: "${@}"
  exit "${ec}"
}

umask 022



:;: 'Tests' :;:

:;: 'Remove certain values' :;:

:;: 'Remove: Regular variable' :;:
unset -v "${x}"

:;: 'Remove: Namerefs' :;:
unset -n "${x}"

:;: 'Remove: Files (or symlinks) and Unused dirs in PATH' :;:
for f in "${xff[@]}"; do

  if [[ -f "${f}" ]] \
    || [[ -L "${f}" ]] \
    || [[ -e "${f}" ]]
  then
    sudo rm -f i--one-file-system --preserve-root=all -- "${f}" \
      || fn_erx "${LINENO}"
  fi; :
done; unset f; :

for f in "${xff[@]}"; do
  d="$(dirname "${f}")"
  if [[ -d "${d}" ]]; then
    lo="$(find "${d}" -mindepth 1 -printf '%p' \
      | cut -b -32
    )"
  fi

  if [[ -z "${lo:0:32}" ]]; then
    if [[ -d "${d}" ]] \
      && [[ ! -L "${d}" ]]
    then
      sudo rmdir -- "${d}" \
        || fn_erx "${LINENO}"
    fi
  fi; unset d lo; :
done; unset f; :

:;: 'Remove: Builtin' :;:
enable -n "${x}"

:;: 'Remove: Function' :;:
unset -f "${x}"

:;: 'Remove: Alias' :;:
unalias -a 



:;: 'Create Shadow variable' :;:
dpo="$(declare -p "${x}")"

if [[ -z "${dpo:0:8}" ]]; then
  eval "${x}"=quux
  dpo="$(declare -p "${x}")"

  if [[ -z "${dpo:0:8}" ]]; then
    fn_erx
  fi
fi; unset dpo



:;: 'Create Shadow nameref' :;:
dao="$(declare -p "${x}" \
  | awk '$2 ~ /n/'
)"

if [[ -z "${dao:0:8}" ]]; then
  declare -n "${x}"=USER
  dao="$(declare -p "${x}" \
    | awk '$2 ~ /n/'
  )"

  if [[ -z "${dao:0:8}" ]]; then
    fn_erx
  fi
fi; unset dao



:;: 'create PATH dirs as necc' :;:
for f in "${xff[@]}"; do
  d="$(dirname "${f}")"

  if [[ ! -d "${d}" ]]; then
    sudo mkdir -p "${d}" \
      || fn_erx "${LINENO}"
  fi; unset d; :
done; unset f; :



:;: 'Create Shadow executable file' :;:
if [[ ! -f "${xfa}" ]]; then
  printf '\x23\x21/usr/bin/sh\n%s \x22\x24\x40\x22\n' "${x}"\
    | sudo tee  "${xfa}" \
    || fn_erx "${LINENO}"

  if [[ ! -f "${xfa}" ]]; then
    fn_erx
  fi
fi

if [[ "$(type -t "${x}")" != file ]]; then
  fn_erx "${LINENO}"
fi



:;: 'Symlink of shadow file' :;:
if [[ ! -f "${xfb}" ]]; then
  sudo ln -s "${xfa}" "${xfb}" \
    || fn_erx "${LINENO}"

  if [[ ! -f "${xfb}" ]]; then
    fn_erx
  fi
fi

if [[ "$(type -t "${x}")" != file ]]; then
  fn_erx "${LINENO}"
fi



:;: 'Hardlink of shadow file' :;:
if [[ ! -f "${xfc}" ]]; then
  sudo ln "${xfa}" "${xfc}" \
    || fn_erx "${LINENO}"

  if [[ ! -f "${xfc}" ]]; then
    fn_erx
  fi
fi

if [[ "$(type -t "${x}")" != file ]]; then
  fn_erx "${LINENO}"
fi



:;: 'Dangling symlink of shadow file' :;:
if [[ ! -f "${xfd}" ]]; then
  sudo cp -b "${xfa}" "${xfd}" \
    || fn_erx "${LINENO}"

  if [[ ! -f "${xfd}" ]]; then
    fn_erx
  fi
fi

if [[ ! -f "${xfe}" ]]; then
  sudo ln -s "${xfd}" "${xfe}" \
    || fn_erx "${LINENO}"

  if [[ ! -f "${xfd}" ]]; then
    fn_erx
  fi
  sudo rm -f i--one-file-system --preserve-root=all -- "${xfd}" \
    || fn_erx "${LINENO}"

  if [[ -f "${xfd}" ]]; then
    fn_erx
  fi
fi

if [[ "$(type -t "${x}")" != file ]]; then
  fn_erx "${LINENO}"
fi

:;: 'the actual file has been removed so the extra symlink may "dangle"' :;:
unset 'xff[3]'



:;: 'DAC permissions of shadow files' :;:
for f in "${xff[@]}" ; do
  fa="$(sudo stat -c%a "${f}")"

  if [[ "${fa}" != 755 ]] \
    && [[ ! -L "${f}" ]]
  then
    sudo chmod 755 "${f}" \
      || fn_erx "${LINENO}"
    so="$(sudo stat -c%a "${f}")" \
      || fn_erx "${LINENO}"

    if ! grep -q 755 <<< "${so}"; then
      fn_erx
    fi
  fi; :
done; :



:;: 'Builtin' :;:
eago="$(enable \
  | grep "${x}"
)"

if [[ -z "${eago:0:8}" ]]; then
  enable "${x}"
  eago="$(enable \
    | grep "${x}"
  )"

  if [[ -z "${eago:0:8}" ]]; then
    fn_erx
  fi
fi; unset eago

if [[ "$(type -t "${x}")" != builtin ]]; then
  fn_erx "${LINENO}"
fi



:;: 'Create Shadow function' :;:
dpfo="$(declare -pf "${x}")"

if [[ -z "${dpfo:0:8}" ]]; then
  : 'define function'
  eval function "${x}" '{ echo function bar;}'
  : 'function call'
  "${x}"
  dpfo="$(declare -pf "${x}")"

  if [[ -z "${dpfo:0:8}" ]]; then
    fn_erx
  fi
fi; unset dpfo

  : '<>'
  type -a "${x}"

if [[ "$(type -t "${x}")" != function ]]; then
  fn_erx "${LINENO}"
fi



:;: 'Create Shadow alias' :;:
shopt -s expand_aliases
ao="$(alias "${x}")"

if [[ -z "${ao:0:8}" ]]; then
  eval alias "${x}='{ echo alias foo;}'"
  ao="$(alias "${x}")"

  if [[ -z "${ao:0:8}" ]]; then
    fn_erx
  fi
fi; unset ao

if [[ "$(type -t "${x}")" != alias ]]; then
  fn_erx "${LINENO}"
fi



:;: 'Verification' :;:
declare -p PATH
sudo find / \( \
  -type f -o -type l \) \( \
  -name 'export' -o -name 'export_*' \) 2> /dev/null \
  | grep -ve zsh -e tracker -e selinux
hash -r
hash
type -P "${x}"
alias "${x}"
command -pV "${x}"
command -V "${x}"
type -a "${x}"

exit 00

