#!/bin/bash -p --
#!/usr/bin/env -iS bash
#   findscan
#   shellcheck disable=SC2317

# Note: Keep your goal in mind.


# TODO:
# - put _fun_trc in RETURN & ERR traps
# - try +trap -p+ with single-line trap cmds
# - add ;ulimit -t 600; ;-v 100; & ;-T 1;

echo 'ampersand:' "$@"
set -CuTEx              # <> for debugging
set -abfP               # <>
#set -r                  # <>
#shopt -s expand_aliases # for .test-shadows
shopt -s nocasematch    # for cli-opts
shopt -u sourcepath     # for CDPATH
shopt -s nullglob       # for lock-fds
shopt -s functrace      # for lock-fds
 assoc_expand_once
 checkhash
 compat31
compat32
compat40
compat41
compat42
compat43
compat44
 complete_fullquote
 extdebug

 promptvars
 shift_verbose
 restricted_shell
 BASHOPTS
 BASH_ARGC BASH_ARGV
 BASH_COMPAT
 BASH_ENV
 BASH_REMATCH instead of complex string parsing?
 
echo 'ampersand:' "$@" 

scr_lic='Apache 2 license'
scr_max_age_of_tmp_files='1 minutes ago'
scr_nm=./findscan
scr_proper_nm='Find scripts'
scr_protected_git_dir_1="${HOME}/MYPROJECTS"
scr_protected_git_dir_2="${HOME}/OTHERSPROJECTS"
scr_repo_nm=scf
scr_tcode="$(
  builtin printf '%(%F_%H%M%S)T' 2>&1
  )"
scr_version=1.0
export scr_lic scr_max_age_of_tmp_files scr_nm scr_proper_nm \
  scr_protected_git_dir_1 scr_protected_git_dir_2 scr_repo_nm \
  scr_tcode scr_version
scr_dirnm="${scr_repo_nm}.d" export scr_dirnm

SC_sevr=error
SC_shells='(sh|bash|dash|ksh)'
export SC_sevr SC_shells

fn_bndry=' ~~~ ~~~ ~~~ ' 
fn_lvl=0 
export fn_lvl fn_bndry 
unset Halt
halt=' ' 
declare -rx Halt halt # lower case for nounset
declare -nx nBL=BASH_LINENO nBS=BASH_SOURCE nF=FUNCNAME nL=LINENO

# move this entire path dection down

unset CDPATH
readonly CDPATH


builtin hash -r
for c in getconf realpath
do
  forced_path_search="$(
    builtin type -P "$c" 2>&1
    )"
  if [[ -z "$forced_path_search" ]] ||
    [[ ! -f "$forced_path_search" ]]
  then
    : "${halt:?}" # reliance on error conflicts with -set -u-
  fi
  builtin hash -p "${forced_path_search}" "$c"
done
unset c forced_path_search

PATH_getconf="$(
  command -p getconf PATH 2>&1 ||
    : "${halt:?}"
  )"
PATH="${PATH_getconf}:/usr/bin:/usr/sbin:${PATH}"
export PATH

if [[ -f ./path-verify.sh ]]; then
  source ./path-verify.sh
else
  : "${halt:?}"
fi
#declare -p PATH

unset LC_ALL
LC_COLLATE="C.UTF-8" LC_CTYPE="C.UTF-8"     # for predictable sorting
LC_NUMERIC="en_US.UTF-8"                    # for commas in large numbers
export LC_COLLATE LC_CTYPE LC_NUMERIC

GREP_COLORS='mt=01;43' 
export GREP_COLORS

rand_i="${RANDOM}" 
rand_uniq_str="${scr_repo_nm}.${$}.${rand_i}"
rand_lock_nm="${rand_uniq_str}.lock.d" 
rand_f_nm="${rand_uniq_str:?}.xtr"
export rand_i rand_uniq_str rand_lock_nm rand_f_nm


# Undocumented CLI option
if [[ "$*" =~ rm_locks ]]
then
  rm_locks='y' 
  export rm_locks
fi

_erx() {
  local exit_code="$?"
  : '_erx BEGINS' "${fn_bndry}" "${fn_lvl}>$(( ++fn_lvl ))"
  echo -e Error: "$@" >&2
  exit "${exit_code}"
  : '_erx ENDS  ' "${fn_bndry}" "${fn_lvl}>$(( --fn_lvl ))"
}
declare -fx _erx
declare -t _erx

# Sub-scripts
declare -ax verb=( '--' )

  # Note: Exit traps don't print accurate trace data in PS4; so use a function

# Processes positional parameters as they were passed to source

function _post_src {
  #[[ ! -v PS4 ]] && printf '%b' "\e[0;34m"

  # enable xtrace and "verbose commands"
  if [[ "$6" == y ]]
  then
    verb=(-v --)
  # otherwise, neutralize the unused "verbose commands" syntax
  else
    verb=(--)
  fi

  # enable xtrace and "verbose commands"
  if [[ "$5" == y ]]
  then
    set -x
  fi

  # after `source` returns, `exit` the calling shell with lineno $1.
  if [[ "$4" == y ]]
  then
    # prints script name and line number of script where function's executed
    : called_at: "$1:$2"

    # prints line number of script where function's executed
    exit -1
  fi
  #[[ ! -v PS4 ]] &&
    printf '%b' "\e[m"
}
declare -fx _post_src
declare -t _post_src

#set -T
#set -x

# Description            # -source- subscript               # 
 : 'ID and sudo'       ;  . './id_sudov'   "${nL}"   n n n; #exit "$nL"
 # So PS4 is on whenever xtrace is on, and DEBUG trap is always on once defined: 2023-06-18 0840
 : 'Enable debugging'  ;  . './gardning'   "${nL}"   n y y; #exit "$nL"
 : 'Required programs' ;  . './reqdcmds'   "${nL}"   n y y;  exit "$nL"
 : 'Locks'             ;  . './lock-fds'   "${nL}"   n y y;  exit "$nL"
#: 'Verify PATH'       ;  . './path-ver'   "${nL}"   n y y;  exit "$nL"
 : 'Verify DACs'       ;  . './dacs-ver'   "${nL}"   n y y;  exit "$nL"
 : 'Verify ACLs'       ;  . './acls-ver'   "${nL}"   n y y;  exit "$nL"
 : 'Option Parsing'    ;  . './cli-opts'   "${nL}"   n y y;  exit "$nL"
 : 'Storing findings'  ;  . './harddisk'   "${nL}"   n y y;  exit "$nL"
# ^--Purpose              ^--dot    nameref-^  xtrace--^ ^      ^-die
#                              ^--filename     exit--^   ^-verbose


  # <> Obligatory debugging block
  #_xtrace_
  #: "${nBS[0]}:${nL} ${nBS[1]}:${nBL[0]}"
  exit "${nL}"
  set -x


# Q: can you append cmd lists into traps?

: 'Search for scripts using either -bash- or -find-'

: 'BASH'

# Bug: greps. parse full outputs of type and command

# define STRING
STRING='export'

# Why is command shadowing an issue in this script?
# I want to use in-shell facilities to generate a
# list of possible commands (& .'. shell scripts), on
# the presumption that the shell will only try to exec
# a file it can find, either in PATH, through the ENV
# or by abspath on the CLI. So bash must be able to
# ID the command somehow. bash reports on strings via
# `type -a` and `declare -p|n`; bash reports on types
# strings via `compgen -A command`. So this script in-
# tends to parse the output of compgen, removing any
# 'command shadows' therefrom, and use type to ID any
# actual files to which any remaining command names
# may refer.

# remove all variable and nameref name collisions
dec_o="$(declare -p "${STRING}" 2>&1)"
if [[ -n "${dec_o}" ]]
then
  unset -v "${STRING}"
  unset -n "${STRING}"
fi

# Bug: infinite loop

# type -t
while true
do
  tt_o="$(type -t "${STRING}" 2>&1)"
  case "${tt_o}" in

    # remove builtin
    builtin)
      enable -n "${STRING}"
      ;;

    # remove functions
    function)
      unset -f "${STRING}"
      ;;

    # remove alias
    alias) unalias "${STRING}"
      ;;

    # Bug: why is '/bin/export' absent from this list?

    # Q: unless 2>&1 is included within command substitutions, the CS
    # will only capture stdout according to ...unix.stackexchange
    #   TODO: find reference
    # what about with process subtitutions?
    file)
      mapfile -d '' -t type_a_files < <(
        type -a "${STRING}" |
          awk -F"${STRING} is " \
            "/^${STRING} is \//"' { printf "%s\0", $2 }'
      )
      declare -p type_a_files

      # Does comnand pass `rpm -V`? ie, has it been
      # tampered with / installed by a 3rd party ...
      # ...but `aide` exists. how do you know the rpmdb
      # hasnt been tampered with? ...by using aide. :-/
      # so check for whether aide is in use...? at least
      # list the problem files as output. ...and print
      # a warning. okay.

      for f in "${type_a_files[@]}"
      do
        rpm_Vf_o="$(rpm -Vf "${f}" 2>&1 2>&1)"

        if [[ -n "${rpm_Vf_o}" ]]
        then
          printf 'rpm: %s\n' "${rpm_Vf_o}"

          # parse output of `rpm`:
            # [root@localhost-live ~]# type -a export
            # export is a shell builtin
            # export is /usr/bin/export
            # export is /bin/export
            #
            # [root@localhost-live ~]# rpm -Vf /usr/bin/export
            # file /usr/bin/export is not owned by any package    # <
            #

          if grep -q 'is not owned by any package' <<< "${rpm_Vf_o}"
          then
            echo rm --one-file-system --preserve-root=all -f "${f}"
            continue 1
          fi
        fi
      done
      unset f rpm_Vf_o
      unset type_a_files

      # And... what if it's "owned" by a package from some other package
      # manager (PM)?
      #
      # each distro has a "primary" package manager, through which any
      # "secondary" package managers would be installed. The distro -
      # primary PM associations... is a conf file.
      #   So, (a) which distro is this script running on, then
      #       (b) query the primary PM
      #
      #   (Partial) List:
      #   0install chocolatey cpan cran dnf docker dpkg emerge flatpak
      # guix homebrew ipkg maven nix npm opkg pacman petget pip portage
      # rpm rubygems scoop slapt-get snap apk-tools zypper
      #
      # see also: https://metacpan.org/release/Alien-Packages
      ;;

    keyword)
      true

      # testing: shadow a string that is a keyword and that doesn't
      #   also fall into any other category defined by `type -a`
      #
      # [root@localhost-live ~]# compgen -k
      # if then else elif fi case esac for select while until do done in
      # function time { } ! [[ ]] coproc
      ;;
    *|'') break
      ;;
  esac
  break
done
unset tt_o

# remove hash table
# lookup file and force a PATH search with type -P
# type -a

# move rpm -V to end of script and only verify the found scripts.
# using dnf & rpm are "ecpensive" opetations. it
# would be better to do such a function after the
# ELF files have been removed from the list

# dnf provides FILE
# rpm -V RPM
# dnf -y --allowerasing reinstall RPM



##  Some thoughts
#
#   Remove variables and parameters.
#
#   with bash, use `type -t` and case to ID how the shell would call
# a command name, and take appropriarte action from there by removing
# anything that isn't a file, ie, an alias, function, etc.
#
#   Then use `type -a` and parse the output of that also, removing
# non-files (ie, syms) as necc.
#     - `type -a` ignores dangling symlinks
#
#   Then use `hash -r; type -P` to get the list of matches within PATH
#
#   compare the results against `rpm -V`
#     do any rpm reinstallations as necc
#
#   if there are (God forbid) any files w/o rpms, either
#     print an error and exit, or
#     offer option to remove the file. ...too draconian. just
#     list out any files of mysterious origin.
#

#exit "${nL}"
#_xtrace_


# Bug: this section /\ and this section \/ need to be merged.

: 'Get all the commands: bash'

# get list of actual top level directories
mapfile -t real_dirs < <(
  sudo find / -maxdepth 1 -mindepth 1 -type d \! -empty |
    sort
)
re="$(
  {
    printf '(%s' "${real_dirs[0]#/}"
    unset 'real_dirs[0]'
    printf '|%s' "${real_dirs[@]#/}"
    printf ')\n'
  } 2>&1
)"

# get completion strings with `compgen`, and ID commands with `type -a`
if [[ "${methods_prog_cv}" = bash_type_a ]]
then

  # create a single array of all commands found by each kind of search.
  # to do this...
  unset allchr char i all_commands real_dirs re tempd

  # Workaround: `compgen -c "*"` was picking up executable shell
  # scripts from the CWD
  tempd="$(mktemp -d --suffix=."${rand_f_nm/%.xtr/.d}" 2>&1)"
  # use pushd / popd
  cd "${tempd}" ||
    _erx cd

  # create a dictionary list of each possible initial character, and
  # include commands with odd yet permitted-by-Linux initial
  # characters, such as \n \t \c or \l, etc

  for i in 8 9 10 11 12 13 {32..127}
  do
    allchr+=(["$i"]="$(printf '%b' "\\$(printf %03o "$i" 2>&1)" 2>&1)")
  done
  allchr[10]=$'\n'
  unset i

    # <>
    #_xtrace_
    set -x

  # for each possible ascii character or value
  for i in "${!allchr[@]}"
  do

    # get a per-character (sub-)list of possible command completions
    mapfile -t per_idx_commands < <(
      compgen -A command "${allchr[i]}"
    )

      # <>
      #declare -p per_idx_commands

    # One difficulty is that a completion string can be any of
    # actual binary command, function, alias, shell keyword,
    # shell builtin and/or directory

    # for each possible completion string found by `compgen`
    for n in "${!per_idx_commands[@]}"
    do

        # <> A sort of progress meter
        printf '%s\n' "${per_idx_commands[n]}"

      # ...why? ...debugging... was the original idea. fewer commands,
      # easier to run and catch bugs quickly...

      # Bug: command shadowing nightmare

      # Search for commands based on the

      # For anywhere in PATH: bash_type_a
      # use `type` to get the shell's definition(s) of `compgen`s
      # completion string, then use `grep` to filter out full
      # function definitions.
      mapfile -t shell_builtin_o < <(
        builtin type -a "${per_idx_commands[n]}" |&
          grep -F "${per_idx_commands[n]}"' is '"${re}" #|&
          #grep -F "${per_idx_commands[n]} is "
      )

      # if `type -a` has no knowledge of the completion string,
      if [[ -z "${shell_builtin_o[*]}" ]]
      then

        # then unset the completion string and start with the next one
        unset_per_idx_commands_n=yes
      fi

      # for each line of output from `type -a`
      for line in "${!shell_builtin_o[@]}"
      do

        # if any result (ie, index) of `type -a`s output refers to an
        # alias, function or shell keyword, then unset that index
        if grep -qE ' is a(liased| function| shell (builtin|keyword))' \
            <<< "${shell_builtin_o[line]}"
          then
            unset 'shell_builtin_o[line]'

        # if any result refers to a file...
        elif grep -qE ' is /' <<< "${shell_builtin_o[line]}"
        then

          command_basename="${shell_builtin_o[line]##*/}" \
            command_fullpath="${shell_builtin_o[line]##* }"

              # <>
              #declare -p all_commands per_idx_commands \
                #shell_builtin_o line command_basename \
                #prev_per_idx_cmds

          # ...and if that file is not already included in either the
          # larger all_commands list or the per-ascii-character
          # prev_per_idx_cmds list...
          printf_o="$(printf '\%s' "${command_basename}" 2>&1)"
          if ! [[ "${all_commands[*]}" =~ ${command_basename} ]] &&
            ! grep -qE "${printf_o:?}" <<< "${prev_per_idx_cmds[@]}" # likely bug, removed /dev\/null, untested
          then

            # ...then record the command's basename in the
            # prev_per_idx_cmds list, unset the type-a output index
            # and start with the next line of type-a output
            prev_per_idx_cmds+=("${command_basename}")
            unset 'shell_builtin_o[line]'
            continue

          else
            unset 'shell_builtin_o[line]'
          fi
        fi
        unset printf_o

        # if all lines of `type -a`s output have been deleted, then
        # begin with the next completion string
        if [[ "${#shell_builtin_o[@]}" -eq 0 ]]
        then
          unset_per_idx_commands_n=yes
        fi
      done

      # Bug: save to an array the canonicalized pathname of each command.

      # remove any directories from the (sub-)list
      if [[ -z "${unset_per_idx_commands_n}" ]]
      then
        realpath_e_o1="$(realpath -e "${per_idx_commands[n]}" 2>&1)"
        realpath_e_o2="$(realpath -e "${command_basename}"  2>&1)"
        realpath_e_o3="$(realpath -e "${command_fullpath}"  2>&1)" #<

        if [[ -d "${realpath_e_o1}" ]] ||
          [[ -d "${realpath_e_o2}" ]] ||
          [[ -d "${realpath_e_o3}" ]]
        then
          unset_per_idx_commands_n=yes
        fi
        unset line shell_builtin_o realpath_e_o{1..3} \
          command_basename command_fullpath
      fi

      if [[ "${unset_per_idx_commands_n}" == yes ]]
      then
        unset 'per_idx_commands[n]'
      fi
      unset unset_per_idx_commands_n
    done
    unset n prev_per_idx_cmds

    # add the (sub-)list to the full list, being careful of index numbers
    mapfile -O $((i * 1000)) -t all_commands < <(
      for x in "${per_idx_commands[@]}"
      do
        printf '%s\n' "${x}"
      done
      unset x per_idx_commands
    )
  done
  unset i

    # <>
    echo 'all_commands, count:' "${#all_commands[@]}"
    #exit "${nL}"
    #_xtrace_

  # use pushd / popd
  cd - ||
    _erx cd
  rmdir -v "${tempd}"
  unset tempd

elif [[ "${methods_prog_cv}" = *bin_find ]]
then
  hash find ||
    exit "${nL}"

else
  echo error
fi

# <>
#_xtrace_
#exit "${nL}"



: 'FIND'

: 'Gather filenames from local attached disk storage'

if [[ "${ABBREV_REL_SEARCH_DIRS}" == all ]]
then

  : 'set a value for a_relevant_search_dirs and..'
  mapfile -d '' -t a_relevant_search_dirs < <(
    sudo  find "${find_sym_opt_L}" "${find_path[@]}" -mindepth 1 \
      -maxdepth 1 -type d \! -empty \
      "${find_exclude_optargs[@]}" -print0
  )

  for sd in "${a_relevant_search_dirs[@]}"
  do

    # assign
    echo "${sd}"
  done

fi

: 'Find all files within the search area. Even the empty ones.'
mapfile -d '' -t a_all_files < <(
  sudo  find "${a_relevant_search_dirs[@]}" -mindepth 1 -type f \
    -print0
)

: 'Sort the original array and test it.'
mapfile -d '' -t a_all_files_sorted < <(
  printf '%s\0' "${a_all_files[@]}" |
    sort -z
)

#_xtrace_
#exit "${nL}"




# SECTION D

# Bug? Can more indices and fewer files be used?

: 'Sort out the scripts, ie, any file beginning with a crashbang from'
: 'the rest of the files'

: 'Get the total number of found files, for the progress indicator'
total_count="$(printf "%'d" "${#a_all_files_sorted[@]}" 2>&1)"
unset IFS


# Bug: the search dirs must be the same, as well as the dnf tx number
# Bug: Use of /tmp/crunchbangs as yn on do loop q. Sb a set of file lists
#.   difftd by search dir / search type / etc. See file "priority"


for all_files_index in "${!a_all_files_sorted[@]}"
do

  : 'Loop'

  loop_idx="$(printf "%'d" $((all_files_index + 1)) 2>&1)"
  printf '%s of %s files\r' "${loop_idx}" "${total_count}"

  : 'file must exist'
  each_sorted_f="${a_all_files_sorted[all_files_index]}"

  if [[ ! -e "${each_sorted_f}" ]]
  then
    a_file_DNE+=([all_files_index]="${each_sorted_f}")
    continue
  fi

  : 'list of empties'
  if [[ ! -s "${each_sorted_f}" ]]
  then
    a_empty_files+=([all_files_index]="${each_sorted_f}")
    continue
  fi

  : '-file- magic'
  sudo /bin/printf '+ %-8d: ' "${all_files_index}" >> \
    "${curr_time_ssubd}file_out"

  file_o="$(sudo file -pk -- "${each_sorted_f}" 2>&1)" # Bug: needs erx
  file_o="${file_o%%64-bit LSB *}"
  a_bin_file_output+=([all_files_index]="${file_o}")

  # Bug? Needs tracking index? One array or file, one line per fso,
  #. use symbols or csv to indicate test results, w common indices
  # Bug: [[ -n sb right after exec file

  if [[ -n "${file_o}" ]]
  then
    sudo cat <<< "${file_o}" >> "${curr_time_ssubd}file_out"
  else
    err_msg="WARNING: -file- produced 0 output:  <${each_sorted_f}>"
    sudo cat <<< "${err_msg}" >> "${curr_time_ssubd}file_out"
  fi

  # Bug: allow for charset / Unicode "byte order marks," ie, 'FE FF'.
  # Bug: keep `od` output in an array
  # Bug: avoid as many disk writes as possible.
  #  Write out only stats?
  # Bug: use indices to reference each type? Store array diffs btw
  # loop? Time loss to disk io? Run file in parallel? Read each file
  # once and use var for both od and file?

  : 'two bytes each'

  #set -x; :;: "<>"

  # fix?: mapfile -d '' -t -O "${all_files_index}" a_od_output

  od_o="$(
    {
      sudo  od -j 0 -N 2 -t x1z -v -- "${each_sorted_f}" |
        tr -s ' ' |
        gawk --lint '{ print $2, $3, $4 }' |
        tr -d '\n' ||
          _erx "P:${PIPESTATUS[*]} I:${all_files_index} ${each_sorted_f}"
    } 2>&1
  )"

  [[ -n "${od_o}" ]] ||
    _erx "I:${all_files_index} ${each_sorted_f}"

  a_bin_od_output+=([all_files_index]="${od_o}")

  read -r byte_0 byte_1 printable_chars <<< "${od_o}"

  export printable_chars # SC-2034

  : '-od_o- non-zero'
  if [[ -z "${byte_0}" ]]
  then
    _erx "I:${all_files_index} <${each_sorted_f}>" \
      '*unreachable code*'
  elif [[ "${byte_0}" == @(23|21) ]]
  then
    : 'compare hexadecimals'

    : 'endianness'
    # https://unix.stackexchange.com/questions/55770/does-hexdump-respect-the-endianness-of-its-system
    # Also:  `lscpu | awk '/Endian/ { print $3 }`
    if [[ "${byte_0}${byte_1}" == 2123 ]]
    then
      a_incorrect_endianness+=([all_files_index]="${each_sorted_f}")

    else

      : 'Crunchbangs'

      # q, does strings recognize unicode? Color codes? Crs? Etc
      # test dd vs strings

      strings_o="$(
        {
          strings -n1 <"${each_sorted_f}" |
            head -n1 |
            cut -b -$((2 ** 14)) ||
              _erx "P:${PIPESTATUS[*]} I:${all_files_index} \
                ${each_sorted_f}"
        } 2>&1
      )"

      IFS= read -r first_line_printable <<< "${strings_o}" ||
        _erx "I:${all_files_index} ${each_sorted_f}"

      : '-#!comment-'
      if [[ "${first_line_printable}" =~ ^'#!comment' ]]
      then
        a_crunches_with_hashbang_comments+=(
          [all_files_index]="${each_sorted_f}")
        continue
      fi

      #   Note: with only /bin/sbin, this if-fi block doesn't execute

      # FR: sort also per-rpm, awk script, probably

      : 'outside of rpm'
      if ! rpm -qf "${each_sorted_f}"
      then

        : 'user or system'
        if [[ "${each_sorted_f}" = /@(root|home|run/media)/* ]]
        then
          a_non_rpm_user_crunches+=(
            [all_files_index]="${each_sorted_f}"
          )
          continue
        else
          a_non_rpm_system_crunches+=(
            [all_files_index]="${each_sorted_f}"
          )
          continue
        fi
      fi
    fi

    #set -x; :;: "<>"

    # scan non-shell scripts for shell escapes ie sys-bin calls
    # https://www.sans.org/blog/escaping-restricted-linux-shells/

    # Bug, "shell scripts" incls python perl etc

    # how to make IRT lists for each interpreter?

    : 'Make an array of the relevant filenames and their crashbangs.'
    a_shell_scripts+=([all_files_index]="$(printf \
      "%'-12d %%=%%=%%=%% %-50s %%=%%=%%=%% %s\n" \
      "${all_files_index}" "${first_line_printable}" \
      "${each_sorted_f}" 2>&1)"
    )

  else

    : 'all others'
    a_all_other_files+=([all_files_index]="$(printf \
      "%'-12d %%=%%=%%=%% %s\n" "${all_files_index}" \
      "${each_sorted_f}" 2>&1)"
    )
  fi
done

# Note, you want to see the full crunchbangs in printed ASCII form

: 'Open a timestamped file and append into it the list of filenames'
: 'and their crashbangs.'

: 'Exporting is necessary of the array names from the above scan'
a_arrays=(a_all_files a_all_files_sorted a_file_DNE a_empty_files
  a_bin_file_output a_bin_od_output a_incorrect_endianness
  a_crunches_with_hashbang_comments a_non_rpm_user_crunches
  a_non_rpm_system_crunches a_shell_scripts a_all_other_files
  a_write_path_nms)
export "${a_arrays[@]}"

_wrt_ary "${a_arrays[@]}"
_fun_bak "${curr_time_ssubd}/file_out"
#exit "${nL}"

: 'create the original list_crunchbangs'
sudo  touch -- "${a_write_path_nms[@]}"

: 'write a file header'
{
  printf '# crunchbangs -- %s\n' "${scr_tcode%-*}"
  printf '# %s\n' "$(declare -p a_relevant_search_dirs 2>&1)" |
    sudo cat > "${a_write_path_nms[@]}"

: 'printing contents of a_shell_scripts array, with backup'
printf '%s\n' "${a_shell_scripts[@]}" |
  sudo cat >> "${a_write_path_nms[@]}"
_fun_bak "${a_write_path_nms[@]}"

#_xtrace_
#exit "${nL}"

# <> ?
_wrt_ary a_write_path_nms

#set -x; :;: "<>"

sudo  head -- "/tmp/${list_crunchbangs##*/}"
#exit "${nL}"

: 'Verify interpreters'

: 'Get the list of interpreters from the list of crunchbangs.'
#   Note: new indices starting from 0
# use the contrived delimiter to capture entire shebang string
# remove leading whitespace
# sort and print unique
# remove leading ^'#!' from each interpreter
# Note: in `awk` cmd, %=%=%=% may need to be double quoted
mapfile -t a_interpreters < <(
  sudo gawk --lint 'BEGIN { FS = "%=%=%=%" } ; /#!/ { print $2 }' -- \
    "/tmp/${list_crunchbangs##*/}" |
    gawk --lint 'BEGIN { FS = " -" } ; { print $1 }' |
    sed 's, *,,g' |
    sort -u |
    cut -b3- ||
      _erx "P:${PIPESTATUS[*]}"
)

#_xtrace_
#exit "${nL}"

# <>
:;: "<>"
#exit "${nL}"

# Duplicate with post-getopts section ?

: 'Ways to find an interpreter if it-s available on disk:'

# Bug: `realpath -e` and `type -a` are redundant?
# Answer: no. `command` is limited to PATH; realpath is limited by
# FS permissions.

# `find` can produce symlinks or actual files
#   # find /usr/sbin -type l | grep resolvconf
#       /usr/sbin/resolvconf
# `command` can produce symlinks
#   # type -a resolvconf
#       resolvconf is /usr/sbin/resolvconf
# `realpath` produces physical paths
#   # realpath -e /usr/sbin/resolvconf
#       /usr/bin/resolvectl

# Bug: parse output of type -a

for program in "${a_interpreters[@]}"
do
  : 'type -a'
  command_o="$(type -a "${program}" 2>&1)"

  if [[ -n "${command_o}" ]]
  then
    realpath_o="$(realpath -e "${command_o}" 2>&1)"

    if [[ -f "${realpath_o}" ]]
    then
      a_interps_rps+=("${realpath_o}")
      on_disk="exists on disk"
      break
    fi
  fi
done

# Bug: add "-d ''" to mapfile

# Canonicalize interpreters paths, sort and list each unique binary.
#   Note: new indices starting from 0
mapfile -t a_interps_rps < <(
  sudo realpath -e -- "${a_interpreters[@]}" |
    sort -u
)

#_xtrace_
#exit "${nL}"

# <>
#exit "${nL}"

# for each interpreter, print it in the 1st 32 bits of a line.

{
  for b in "${!a_interps_rps[@]}"
  do

    printf '%-32s' "${a_interps_rps[b]}"

    # Bug: use `type -a`; parse its output

    # use a shell builtin to test for each interpreter's presence on
    # disk, and write to a variable the test's result

    on_disk="$(command -V "${a_interps_rps[b]}")"

    # create a new array of structured data: index, interpreter and
    # test result
    a_interps_disk_repo+=([b]="${b} : ${a_interps_rps[b]} : ${on_disk}")

    # into the next 8 bits of a line, print the test result
    printf '%-8s' "${on_disk}"

    # identify the originating rpm for each interpreter.
    # binary need not be installed.
    # filter for rpm name by CPU type in its filename
    # sort rpms and print each unique
    dnf_po="$(
      {
        sudo  dnf provides -- "${a_interps_rps[b]}" |
          gawk --lint '/x86_64|i686/ { print $1 }' |
          sort -u
      } 2>&1
    )"

    # based on whether there was any output,
    # save a result message to variable
    if [[ -n "$dnf_po" ]]
    then
      in_repos="exists in repos"
    else
      in_repos="DNE in repos"
    fi

    # in the same array, in a different range of indices,
    # save the index, interpretet name and rpm test result
    a_interps_disk_repo+=([b + 100]="${b} : ${a_interps_rps[b]} : ${in_repos}")

    # print rpm test result to end of line; include a newline
    printf '\t\t\t\t%s\n' "${in_repos}"

    # if any data exists, print the list of originating rpms
    printf '%s\n' "$dnf_po"
    unset dnf_po on_disk in_repos

  done |
    sudo cat >> "${curr_time_ssubd}a_interpreters"
unset b

# <>
#set -x; :;: "<>"
_wrt_ary a_write_path_nms a_interpreters a_interps_rps \
  a_interps_disk_repo
#exit "${nL}"

#_xtrace_
#exit "${nL}"

# SECTION E

: 'CENTRAL TASK, 1 OF 2: Filter the list of crashbangs with the list'
: 'of shells.'

# print one file header

{
  printf '# SC-scrpts-list -- %s\n' "${scr_tcode%-*}"
  printf '# %s\n' "$(declare -p  a_relevant_search_dirs 2>&1)" |
    sudo cat >> "${list_crunchbangs}_SC-scrpts-list"

# filter out interpreters not compatible with shellcheck.
# file $list_crunchbangs is located in $time_dir.
sudo  grep -E -- '/bin/'"${SC_shells}"'.*%=%=%=%' "${list_crunchbangs}" |
  sudo  tee -a -- "${list_crunchbangs}_SC-scrpts-list" ||
    _erx "${nL}"

# Copy list to /tmp
sudo  rsync -ca -- "${list_crunchbangs}_SC-scrpts-list" /tmp ||
  _erx "${nL}"

# Backup both lists
_fun_bak "${list_crunchbangs}_SC-scrpts-list" /tmp/*_SC-scrpts-list

# <>
#_xtrace_
:;: "<>"
_wrt_ary scr_tcode list_crunchbangs SC_shells
#exit "${nL}"

#_xtrace_
#exit "${nL}"

: 'CENTRAL TASK, 2 of 2: with ShellCheck scan each script for errors'

# TODO: keep "$all_files_index" tracked with content all the way through
#   into the "_found_scripts" file

# Bug? line 1 of script could contain percent symbols

: 'A hell world of pipelines'
#   Q: how to translate the correct newlines into nulls to separate the
#   filenames when reading from a file?  awk? files _can_ contain \n-s

# for every line beginning with a crashbang...
grep_o="$(sudo  grep ^'#!' -- "${list_crunchbangs}_SC-scrpts-list" 2>&1)"

# get the filename
cut_o="$(cut -d '%' -f5- <<< "${grep_o}" 2>&1)"

# collect the filenames in a single list
mapfile -t a_each_abspath_scriptnm <<< "${cut_o}"

# remove leading whitespace
a_each_abspath_scriptnm=("${a_each_abspath_scriptnm[@]##* }")

# Wk: awk , multi-char delim, remv lead+trail wspc - redef $0 ?, printf

#   grep -Eo | tr

# Bug: rename variable "$c" below
# Bug: why sort by line count? More text, more Bugs? How to prior mult
#   factors?

# count number of newlines in each script
wc_o="$(sudo  wc -l -- "${a_each_abspath_scriptnm[@]}" 2>&1)"

# remove 'totals' line
wc_o="${wc_o%$'\n*'}"

# sort script lengths descending
sort_o="$(sort -gr <<< "${wc_o}" 2>&1)"

# print script names
awko="$(gawk --lint '{ print $2 }' <<< "${sort_o}" 2>&1)"

# create a list of script names sorted by line count descending
mapfile -t a_each_scr_list_sorted_by_linect \
  <<< "${awko}"

# define file name, including severity and path symbols (target file)
found_scrpts_f="${list_crunchbangs}_found_scripts"
found_scrpts_f+="_${sc_sev_abrv}_${ABBREV_REL_SEARCH_DIRS}"
i=0

# Bug? 1st grep extra?

{

  # for each sorted script
  for sorted_script in "${!a_each_scr_list_sorted_by_linect[@]}"
  do

    # run shellcheck with selected/default severity
    # remove URL's
    # capture SC error codes with their descriptions
    # truncate descriptions to 64 bytes
    # sort numerically
    # count the number of unique errors
    # sort by the third column: severity
    # collect output in an array
    # on any non-zero exit status, print an error, incuding PIPEFAIL
    # array, and exit the script when filters, etc completes, print
    # a NULL to start a new mapfile index
    mapfile -d '' -t a_each_scr_SC_results < <(
      shellcheck -S "${SC_sevr}" "${a_each_scr_list_sorted_by_linect[sorted_script]}" |
        grep -Fv 'shellcheck.net' |
        grep -Eo "SC[0-9]{4}.*" |
        cut -b -64 |
        sort -g |
        uniq -c |
        sort -k3 ||
          _erx "P:${PIPESTATUS[*]} I: S:" # index and script name
      # end of pipe intended
      printf '\0'
    )

    # if there's any output from shellcheck
    if [[ -n "${a_each_scr_SC_results[*]:0:1}" ]]
    then

      # Bug: iterator sb $sorted_script ? sorted_script should have

      # print a line header. (as-is:) including a new index number
      # for each script
      printf '\n%-4d%s\n' $((i++)) \
        "${a_each_scr_list_sorted_by_linect[sorted_script]}"
      # print all massaged SC results for each script
      printf '%s' "${a_each_scr_SC_results[@]}"
    fi
  done
  unset i

  # append each text group to a findings file
} |
  sudo cat >> "${found_scrpts_f}"

: 'Write semi-permanent archives'

# backup the findings file
_fun_bak "${found_scrpts_f}"

# make copies of the findings file and backup those copies
for d in /tmp "${main_d}"
do
  sudo  rsync -ca -- "${found_scrpts_f}" "${d}" ||
    _erx "${nL}"
  _fun_bak "${d}/${found_scrpts_f##*/}"
done
unset d

# <> Print some variables for interactive use
z=0
for d in "${curr_time_ssubd}" "${main_d}" /tmp
do
  printf '\n\t data_d_%d=%s\n' $((z++)) "${d}"
done
unset d z

trap - EXIT
hash
exit 00

# TODO: (end of script list)
#   - grep output of rpm -qi for URLs, ie, github. which can I
#       repair without adding a new login?
#   - grep scripts for 'todo's
#   - grep for 'shellcheck disable'
#   - grep for 'bash -c' and 'sh -c'
#   - grep for '(source|\.) .?.?/'
#   - add search for FSO names w \t or \n & file as bugs
#   - add grep for globs '“*”, “?”, or “[”, etc' preceded by white space or at the beginning of a line, and not in a comment
#   - verify text encoding (ie, is / isn't UTF-8) within scripts and in absolute filenames. see d wheeler, https://dwheeler.com/essays/filenames-in-shell.html section 3.5 re iconv etc

# ToDo: for $rand_i, use the most recent git commit hash ID
# Q: LD_PRELOAD LD_LIBRARY_PATH ? https://www.ics.uci.edu/~goodrich/teach/cs201P/notes/02_Environment_Variables.pdf

