# priority
# 

new options
./findscan [github repo] 
./scf [wo existing disables]
./scf [rpm]
./scf [dir]
./scf [get SC wiki pgs] 

#. L = Later
#. D = Done
#. 
#   purpose -- sys admining, security, etc
#.    L pre-curated lists? 
#.    L keyword for man -k search?
#.    dnf groups?
#   ubiquity -- datasets, each major distro
#.    `command -p`
#     L sqlite
#
#   search patterns, ie, how likely to be exec'd
#                                                 syms    decend
#.    1.  found w only `getconf PATH` and `find`
#     2.  in "standard PATH" and `find`
#     .  in actual PATH
#.    ?  non-sym via find
#.    ?  follow sym via find
#     ?  `compgen` knows of it
#.    ?  `command -p` knows of it - also ubiquity
#
#     . per fsroot dir search, no syms - ie, partial disk search
#.    . full disk search, indicriminate
#
#     sourcable scripts wo #!'s -- `file` output, ascii text
#.      Have no #! & No execute bit set, per POSIX
#     L default vs everything installs?
#     L distro stats on most popular pkg installs?
#   bugginess of scripts
#.    `bash -n`
#     SC "score" -- array or disk files, per target file
#.    Additional linters online
#     L kcov (avail in F37 repos) --
#     L bashdb (na in repos) -- 
#   reliableness of ID'ing scripts
#     by #!
#       D character encoding -- historically resolved issue
#       D endianness -- rare issue
#     by `file` magic
#     L by active use
#     L   atimes vs ctimes, of ascii files per `file`
#.    L   read 1st 128 byyes w dd? to avoid atime change? 
#.    L     file's byte location on disk?
#.    L     how to get time stats wo changing them 

# sort by rpm
# -r [rpm|all]
# -d [history integer]
# -V verify rpm
# -P search files in PATH
# -h use `hash` to track usage
# -i verify interpreter
# -c verify crashbang
# -p verify PATH
# -D use persistent file structure
# -v verbose
# -h help
# -s find / include source scripts
# -N do not write anything to disk
# -a alphanumeric sort


# Notes

# https://unix.stackexchange.com/questions/171346/security-implications-of-forgetting-to-quote-a-variable-in-bash-posix-shells
#
# setgid / setuid scripts or interpreters
# system() in php/perl/python
# snippets in man and info pages 
# less has LESSCHARSET=utf-8
# https://github.com/bats-core/bats-core

# Note also, whether there are any http / curl / wget / network commands
#   how old the scripts are, ie, mtime/copyright year/...
# grep for 

# add'l interpreters: csh zsh tclsh awk perl python ruby
# add'l tests: bash-n
# add'l searches: man pgs, info pgs, sourcable files
# add'l analyzers: bashdb bats kcov
# grep for: excuted variables, input validation, network commands, system calls per language, 
#     grep -iE 'exec.*[tu]cp'
#     grep -iE 'exec.*host'
#     grep -iE '(telnet|nc|ftp|curl|wget|...)
#   TODO's and FIXME's, requests for user input
# measure per-script usage: atime? audit? hash? mtime?
# memory usage: do not write to disk, use persistent storage, use temp files
# add'l package managers: apt cargo dpkg flatpak gem npm pacman pip snap zypper 
# report_simple_stats = yes
# select one rpm
# test for setuid & setgid: scripts, interpreters, files / bins sourced / executed by scritps
# sort order: alnum, per dnf history transaction number, by rpm name
# scanning binary: dd od strings
# target disk: attached storage, unmounted iso
# verbose = yes
# add'l verify: crashbangs, interpreters, rpms




# PATH_as-is
#   y = bash or find                        -- DEFAULT
#     # for find, convert PATH into an array 
#   n =                                     -- side effect of enabling any other PATH_* setting
# 
### MUTUALLY EXCLUSIVE: last set takes precedence
#   PATH_getconf_PATH   -- a limiting setting, usually '/usr/bin'
#     y = bash or find                        -- usually for debugging or research
#       # `unset PATH; PATH="$(getconf PATH)"
#     n =                                     -- default setting
#   PATH_bin-only       -- a limiting setting, usually the same as 'PATH_getconf_PATH'
#     y = bash or find                        -- debug setting
#       # PATH='/usr/bin:/bin'
#     n =                                     -- practical result of customary configuration AND default setting
#   PATH_sbin-only      -- a limiting setting
#     y = bash or find                        -- debug setting
#       # PATH='/usr/sbin:/sbin'
#     n =                                     -- practical result of customary configuration AND default setting
#   PATH_bin-sbin-only  -- a limiting setting
#     y = bash or find                        -- practical result of customary configuration
#       # PATH='/usr/sbin:/sbin:/usr/bin:/bin'
#     n =                                     -- default setting


# BASH_command_pv          -- usually a limiting setting, to be used independent of PATH
#   y = bash only
#     # compgen -c
#   n = <no meaning>                        -- default setting
# BASH_command_v
#   y = bash only
#     # compgen -c
#   n = <no meaning>                        -- default setting
# BASH_type_a
#   y = bash only
#     # compgen -c
#   n = <no meaning>                        -- default setting


# w_symlinks          
#   y = bash or find                        -- DEFAULT
#   n = find only
# 
# w_descend
#   y = find only
#   n = find or bash                        -- default setting
# 
# w_user-custom_dirs
#   y = (ie, explicit include) find only
#   n = (ie, implicit exclude) find only    -- default setting
# 
# w_procfs
#   y = (ie, explicit include) find only
#   n = (ie, implicit exclude) bash or find -- practical result of customary PATH config AND default setting
# 
# w_sysfs
#   y = (ie, explicit include) find only
#   n = (ie, implicit exclude) bash or find -- practical result of customary PATH config AND default setting
# 
# actual_all
#   y = (ie, explicit include) find only
#   n = (ie, implicit exclude) bash or find -- practical result of customary PATH config AND default setting



#   to have an option to search all or just some dirs
#   to store results on a per-dir basis, to reduce search time
#     per mangling of realpath
#     per dnf tx number
#     per severity level
#     per sha1sum
#  _boot
#    _tx3
#    _tx4
#      _e
#        _6cb7aa1478a1d36f5b70d7fcb3e73486caae5bfc
#          # abs path filename
#          # full shellcheck output
#          # ...
#      _w
#        _6cb7aa1478a1d36f5b70d7fcb3e73486caae5bfc
#          # abs path filename
#          # diff of shellcheck output
#          # ...
#      _s

# grep for OPTARG, and other default bash input vars



# command -pV bash      # if there's an alias, prints only the alias
#                       #   then same with function, then file
# command -V bash       # if there's an alias....
#                       #    same with function...
# command -p bash       # returns '/usr/bin/bash' even when '/usr/bin/bash'
#                       #   is not the first command named 'bash' in PATH
#
# type -t bash          # returns one word, how shell would interpret it
#                       #   if used as a command name
# hash -r; type -P bash # to force a PATH lookup
# declare -p bash       # to print all parameters, incl namerefs
#   unset               #   to remove variables; if no var, then removes 
#                       #     functions
#   unset -v            #   to remove variables
#   unset -n            #   to remove namerefs
# declare -f bash       # to print functions
#   unset -f bash       #   to remove functions
# type -a bash          # to print aliases, functions, builtins, files 
#                       #   or keywords; performs a complete PATH search (??);
#                       #   detects hardlinks and symlinks
# type -P bash          # forces a PATH search if the hash table is empty 
# unalias bash          # to remove an alias
# unalias -a            #   to remove all aliases
# hash -r               # to clear the hash table
# hash                  # if empty, prints, 'hash: hash table empty'; 
#                       #   all lookups limited to PATH
# command               # all lookups, also, are limited to PATH
# info bash BUILTIN     # info pages
# help -m BUILTIN       # help pages
#   help BUILTIN        #   
# bind                  # binds keyboard keys to commands
# local                 # sets variables inside functions
# return                # returns from functions and sourcing of files
#
# declare -p bash       # print all variables matching NAME
# unset -n bash         # only way to remove a nameref
# unset -v bash         # removes variables
# unset -f bash         # removes functions
# unalias -a            # remove all aliases 
# hash -r               # remove hash table
# type -P bash          # force a path search, if the hash table is empty;
#                       #   returns first match only
# type -a bash          # performs full PATH search, returns mult matches
#                       #   for the same file name 

# env 'ALL COMMANDS'
# sh -c 'ALL COMMANDS'
# bash -c 'ALL COMMANDS'
# env sh -c 'ALL COMMANDS'
# env bash -c 'ALL COMMANDS'

#   sh -c
#   strace
#   rpm -V|q[f|l]
#   info bash BUILTIN


# [liveuser@localhost-live scf]$ env type -a export
# export is a special shell builtin
# [liveuser@localhost-live scf]$ env type -t export
# builtin
# [liveuser@localhost-live scf]$ sh -c 'type -t export'
# builtin

# even when the `hash` builtin is disabled with `enable -n hash`, 
# command hashing still occurs.

# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced

#   Note: Aliases can be used for abbreviating command(s) in 
# string form, however, functions are required for abbreviating 
# functions.

