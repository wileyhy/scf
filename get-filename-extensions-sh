#!/bin/bash
# get-filename-extensions-sh
# written in bash 5.1

# get filename extensions from output of find-and-scan-shell-scripts-sh
# for constructing the regex filter "$f" in find-and-scan-shell-scripts-sh


# shellcheck disable=SC2184
unset [a-zA-Z] # expansion intended
_uc(){
    unset 'all_files[$i]'
    continue
}
m="${TEMPDIR:="$HOME"}" # <m>ountpoint
t="$( builtin printf '%(%F_%H%M%S)T\n' )" # <t>ime
declare -p m t

# find data files from find-and-scan-shell-scripts-sh
mapfile -d '' -t data_files < <( 
  find / -type f -name '*_remaining_files' -print0 2> /dev/null )

# get latest data file and `source` it (function from libera IRC)
for i in "${!data_files[@]}"; do
  [[ "${data_files[$i]}" -nt "$latest" ]] && 
    latest="${data_files[$i]}"
done; # <i>ndex
# shellcheck disable=SC1090
. "$latest" || { echo source failed; exit 2; } 
# shellcheck disable=SC2154
[[ -z "${all_files[*]:1:1}" ]] && { echo "$LINENO, source failed"; exit 2; }
all_files=( "${all_files[@]}" )

# get files that have filename extensions and that aren't shell scripts
for i in "${!all_files[@]}"; do
  unset n x y hex_bits # necc inside a loop
  n="${all_files[$i]}" # <n>ameref (sort of)
  
  if ! [[ "${n##*/}" =~ \. ]]; then        _uc; fi  # must contain a period
  if   [[ ! -e "$n"        ]]; then        _uc; fi  # file must exist

  # shellcheck disable=SC2034
  y="${n##*/}" # effectivel<y> `basename`
  if [[ "${y:0:1}" == '.'  ]]; then y="${y:1}"; fi  # rename dotfiles in RAM

  x="${y##*.}" # e<x>tension
  if   [[ "$y" == "$x"     ]]; then        _uc; fi  # no change = no extension

  mapfile -d '' -t hex_bits < <(  
    od -Ax0 -N2 -x "$n" |
    tr -s ' \n\t' '\0' )

  # read from disk in binary the first two bytes of every remaining file  
  # in the list, and format it in <h>exadecimal.
  if [[ "${hex_bits[1]}" == '2123' ]]; then
    _uc
  else
    file -p "$n" >> "${m}/${t}_B_file_o" ;
    printf '<%s> <%s> \n' "$x" "$n" >> "${m}/${t}_B_extensions" ; 
  fi;

  _uc
done

# process results
wc -l "${m}/${t}_B"_{extensions,file_o}

mapfile -t new_exts < <( 
  awk '{ print $1 }' "${m}/${t}_B_extensions" | 
    tr -d '<>' | 
    sort | 
    uniq -c | 
    sort -gr | 
    awk '( $1 >= 100 ) { print $2 }' |
    sort ); # "the horror!"

mapfile -d '' -t exts < <( 
  printf '%s\0' "${new_exts[@]}" | 
    sort -zu ) ; 

echo "${#exts[@]}";
declare -p exts
echo; printf '|%s' "${exts[@]}"; echo
exit
