#!/bin/bash
# find-and-scan-shell-scripts-sh
# Written in bash version 5.1
PATH='/usr/bin:/usr/sbin'


# Implementation-dependent arguments for options parseable by `shellcheck`.
shells='(sh|bash|dash|ksh)'
severity='error'


# Variables
time="$( builtin printf '%(%F_%H%M%S)T' )"
crashbang_byte_length=32
fstype_regexp='(binfmt_misc|bpf|cgroup2|configfs|debugfs|devpts|devtmpfs|efivarfs|fusectl|hugetlbfs|iso9660|mqueue|proc|pstore|rpc_pipefs|securityfs|selinuxfs|sysfs|tmpfs|tracefs)'

# Functions
_erx(){ 
  local ec=$?
  echo Error: "$@" 
  return $ec ||  
    exit $ec
}
_num(){ 
  local -n array="$1" 
  echo "${#array[@]}"
}
# Usage:  _usage [exit-code]
_usage(){
  cat <<-EOF
    SCF - Shell Check Find, version 1.0 (redhat-linux)
    Find and scan shell scripts depending on severity level. 
        Usage:  ./find-and-scan-shell-scripts-sh [-ehiw]
                -e error          -i info
                -h help           -w warning
        Only the first option is processed.
    SCF homepage: https://github.com/wileyhy/scf/
EOF
  exit "$1"
}

# Option parsing
if [[ "$#" -gt 0 ]]; then
  first_two_chars="${1:0:2}"
  case "$first_two_chars" in
    --) printf '\n\tHappy Easter!\n\n'
          exit 0;;
    -e) severity='error';;
    -i) severity='info';;
    -w) severity='warning';;
    -h) _usage 0;;
    *)  _usage 1;;
  esac
fi

# Create the data directories
#   In case of large log files, programatically select a save directory, 
# attached to the local disk, where any output can be saved; prefer USB 
# flash drives. This particular `df` command will output three alpha-
# numeric strings separated by whitespace on a single line. Filter out 
# via regexp certain FS types and `sort` the output by size descending. 
# With `awk`, take the device with the most available space and get its 
# mountpoint with `findmnt`. If there is no output, then set 'mountpoint'
# according to environment variables. 
#   Note: such a complex command in shell saves ~75 lines of step by steps.
#   Bug? is '/run/media' portable to other current distros? 
mountpoint="$( 
  findmnt --canonicalize --output=target --noheadings "$( 
    find /run/media -mindepth 2 -maxdepth 2 -type d |
      df --sync --local --output='fstype,avail,source' --block-size=1 |
      grep --extended-regexp --invert-match '^Type[[:space:]]*Avail' |
      grep --extended-regexp --invert-match ^"$fstype_regexp" |
      sort --general-numeric-sort --reverse --key=2 |
      awk 'NR == 1 { print $3 }' 
  )"
)"
[[ -z "$mountpoint" ]] &&
  mountpoint="${TEMPDIR:="$HOME"}"
datadir="${mountpoint}/scf.d/latest"
timedir="${datadir}/t_${time}"
datafile="${timedir}/crunchbangs"
unlisted="${timedir}/unlisted"
umask 077

if [[ ! -d "$datadir" ]]; then
  mkdir -p "$datadir" ||
    _erx $LINENO
fi

# Label the current data as "latest."
previous=( "${datadir}"/* )
if [[ -n "${previous[*]:0:1}" ]]; then
  mv "${previous[@]}" "${mountpoint}/scf.d/" ||  
    _erx $LINENO
fi

if [[ ! -d "$timedir" ]]; then
  mkdir -p "$timedir" ||
    _erx $LINENO
fi


# Gather filenames from local attached disk storage
mapfile -d '' -t relevant_search_dirs < <(
  find / -mindepth 1 -maxdepth 1 -type d \
    \( \! -name proc -a \! -name sys \) -print0 )

# DEBUG: "${relevant_search_dirs[@]}" OR '/usr/sbin' OR /usr/{,s}bin
mapfile -d '' -t all_files < <( 
  find "${relevant_search_dirs[@]}" -type f -print0 2> /dev/null )

# Sort out the scripts, ie, any file beginning with a '#!', from the
# rest of the files.
for i_1 in "${!all_files[@]}"; do
  unset crashbang od_o nextfile
  nextfile="${all_files[$i_1]}"

  # Filter: file must exist and have a size greater than zero
  if [[ ! -s "$nextfile" ]]; then
    unset 'all_files[$i1]'
    continue
  fi

  # Read from disk in binary the first two bytes of every remaining file in 
  # the list, and format it in hexadecimal.
  mapfile -d '' -t od_o < <(  
    od --address-radix=x --read-bytes=2 --format=x2z "$nextfile" |
      tr --squeeze-repeats ' \n\t' '\0' )
			
  # If 'od_o' contains some non-zero data, as it should, compare the 
  # hexidecimal representations to find any crunchbangs.
  if [[ -z "${od_o[*]:0:1}" ]]; then
    _erx $LINENO
	
  elif
    [[ "${od_o[1]}" == '2123' ]]; then

    # When a hashbang's found, use `strings` to filter out any non-
    # printable data, to protect `head` from garbage input, and to 
    # get the full "shebang" string in ASCII.
    crashbang="$( strings --bytes=1 "$nextfile" |
      head --lines=1 |
      head --bytes="$crashbang_byte_length" )"

    # Make a record of the filenames and their '#!'s, ie, open 
    # & append to a timestamped file
    printf '%s \t\t\t %s \n' "$crashbang" "$nextfile" >> "$datafile" ||
      _erx $LINENO
    unset 'all_files[$i]'
  fi
done


# Make the data readable and useful

# Backup the original data file, and add some brevity.
# Note: most distros replace certain commands with aliases
command cp -af "$datafile" "${datafile}.orig-bak"
f="$datafile"

# Bug: put $shells into $ere3
# Alterations
ere1='^#![[:space:]]{1,4}/'
ere2='>?[[:space:]]{3,}<?/?[[:alnum:]].*>?[[:space:]]{3,}<?'
ere3=^'[0-9]{1,7}:#! ?(/usr)?/bin/(env|(sh|bash|dash|ksh)?) *<?(/usr)?(/bin/)?(sh|bash|dash|ksh) ?>? *'

_test1(){
  grep -E "$ere1" "$1"
}
_test2(){
  grep -nE "$ere2" "$1"
} # Bug? is -n necc?

# Alteration 1: in the data file, fix the hashbangs with spaces in them. ## works
_test1 "$f"
sed -Ei "s=${ere1}=#\!/=g" "$f"
_test1 "$f"
cat "$f" > "${f}_post-test1"
command cp -af "${f}_post-test1" "${f}_post-test1.bak"

# Alteration 2: fix the odd extra data segments in the middles of the rows. 
# Requires using 'relevant_search_dirs' in the above `find` path. ## works
_test2 "$f"
sed -Ei "s=${ere2}=    =g" "$f"
_test2 "$f"
cat "$f" > "${f}_post-test2"
command cp -af "${f}_post-test2" "${f}_post-test2.bak"

  ls -l "$f"*
  wc "$f"*

# Alteration 3: Apply grep-style line numbers, ie, in-file indices. These are necc 
# for test 5, however, can only be applied prior to the full list 
# becoming subdivided. 
grep -nE '.' "$f" > "${f}_test3_indexed"
command cp -af "${f}_test3_indexed" "${f}_test3_indexed.bak"


# CENTRAL TASK, 1 OF 2: Filter the list of crunchbangs with the list 
# of shells
grep -E "$ere3" "${f}_test3_indexed" > "${f}_test3_list"
command cp -af "${f}_test3_list" "${f}_test3_list.bak"

  ls -l "$f"*
  wc "${f}"*

# DEBUG: Invert the previous `grep` command, i.e.,
#   { NOT (sh|bash|dash|ksh) == (tclsh|zsh|tcsh) }
grep -vE "$ere3" "${f}_test3_indexed" |
  sed -E 's=[<>]=-----------------------------------------------------=g' |
  sed 's=[[:space:]]==g' |
  cut -c -64 |
  grep -F 'sh' > "${f}_test4_reverse"
command cp -af "${f}_test4_reverse" "${f}_test4_reverse.bak"

  ls -l "$f"*
  cat "${f}_test4_reverse"
  wc "$f"*


# EXTRA: get the list of files with '#!'s that arent relevant shell scripts.
unset full_index shells_subindx verify_subindx

# create some arrays

# Array 1: full set of indices; a contiguous array. number of indices 
# in full_index should equal `wc -l` of "${f}_test3_indexed"
mapfile -t -O 1 full_index < <( 
  cut '-d:' -f1 "${f}_test3_indexed" )

if ! [[ "${#full_index[@]}" == "$( 
  wc -l "${f}_test3_indexed" | 
    cut '-d ' -f1 )" ]]
then
  _erx $LINENO
fi

  _num full_index
  declare -p full_index | 
    more -RN

# Array 2: partial set of indices for only relevant scripts; a sparse
# array. number of indices in shells_subindx should equal `wc -l` of 
# "${f}_test3_list"
mapfile -t -O 1 shells_subindx < <( 
  cut '-d:' -f1 "${f}_test3_list" )

if ! [[ "${#shells_subindx[@]}" == "$( 
  wc -l "${f}_test3_list" | 
    cut '-d ' -f1 )" ]]
then
  _erx $LINENO
fi

  declare -p shells_subindx | 
    more -RN
  _num shells_subindx
  wc "${f}"*

# Array 3: partial set of indices for only *irrelevant* scripts; also 
# a sparse array
unset f b verify_subindx shells_dup
shells_dup=( "${shells_subindx[@]}" )

for x in "${full_index[@]}"; do

  for b in "${!shells_subindx[@]}"; do

    if [[ $f -gt "${shells_subindx[$b]}" ]]; then
      unset 'shells_subindx[$b]'
      continue 1

    elif [[ $x = "${shells_subindx[$b]}" ]]; then
      continue 2

    else
      verify_subindx+=( "$x" )
      continue 2
    fi
  done
done

  declare -p full_index shells_dup verify_subindx | 
    more -NR

# the counts should equal
if [[ $(( "$( 
  _num shells_dup )" + "$( 
    _num verify_subindx )" )) -eq "$( 
    _num full_index )" ]]
then
  _erx $LINENO
fi

# Bug: can sed do this loop in one fork?
for v in "${verify_subindx[@]}"; do
  sed -n "${v}p" "${f}_post-test2" >> "${f}_test5_unlisted"
done
command cp -af "${f}_test5_unlisted" "${f}_test5_unlisted.bak"


# MAIN TASK, 2 of 2: with ShellCheck scan each script for errors
for i_2 in "${!shell_scripts[@]}"; do 
  script="${shell_scripts[$i_2]}"

  mapfile -t errs < <( 
    shellcheck -S "$severity" "$script" | 
      grep -vFe 'shellcheck.net' | 
      grep --color=never -Eo 'SC[0-9]{4}' | 
      sort -g | 
      uniq -c |
      sed 's,^[[:space:]]*,,g' )

  # Bug: formatting

  # If shellcheck found any issues, then open & append some 
  # prioritized work lists with indices
  if [[ -n "${errs[*]:0:1}" ]]; then 
		
    printf '%d  <%s>\n' "$i_2" "$script" >> \
      "${f}_found_scripts_with_indices"

    for each_error in "${errs[@]}"; do
      printf '%s %% <idx:%d>\n' "${each_error//$'\n'/}" "$i_2" >> \
      "${f}_found_errors_with_indices_unsorted"
    done
  fi

  unset errors script 'shell_scripts[$i_2]'
done
