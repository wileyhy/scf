#!/bin/bash
# set-up-git_sudo-sh

## Notes
###   Online Git Pro book:
###     https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository

# Frequently changing variables
dev_d=~/MYPROJECT
repo_nm=scrfi

# Regular users only
if [[ "${UID}" == 0 ]]; then
  printf '\n\t Must be a regular user and use sudo. \n\n'
  exit "${LINENO}"
  else
  sudo -v \
    || exit "${LINENO}"
fi

# Clean environment (re command injection)
unset files bashrc_str f tmpf gitmesg gitignr ps_o \
  || exit "${LINENO}"
PATH='/usr/bin:/usr/sbin' \
  || exit "${LINENO}"

# Network & time
if ! sudo ping -c 1 -W 15 8.8.8.8 > /dev/null; then
  sudo systemctl start NetworkManager.service
  wait -f
  sleep 15
  sudo ping -c 1 -W 15 8.8.8.8 > /dev/null \
    || exit "${LINENO}"
fi

# BASH
## .bashrc
umask 071
bashrc_str='EDITOR=/usr/bin/vim; BROWSER=/usr/bin/firefox;'

files=(/root/.bashrc /home/*/.bashrc)
for f in "${files[@]}"; do

  if ! sudo grep -q -- "${bashrc_str}" "${f}"; then
    sudo cp -a -- "${f}" "${f}~"
    echo "${bashrc_str}" \
      | sudo tee -a -- "${f}" >/dev/null
  fi
done
unset files f

# VIM
umask 177
tmpf="$(mktemp)"
cat << EOF > "${tmpf}"
" per google:
set number

" per https://stackoverflow.com/questions/234564/tab-key-4-spaces-and-auto-indent-after-curly-braces-in-vim
filetype plugin indent on
" show existing tab with 2 spaces width
set tabstop=2
" when indenting with '>', use 2 spaces width
set shiftwidth=2
" On pressing tab, insert 2 spaces
set expandtab
EOF
# shellcheck disable=SC2024
sudo tee /root/.vimrc < "${tmpf}" > /dev/null
rm -f -- "${tmpf}"
unset tmpf

## Copy root-user files to $USER
sudo rsync -ca /root/.vimrc "/home/${USER}"
sudo chown 1000:1000 "/home/${USER}/.vimrc"
chmod 0400 "/home/${USER}/.vimrc"

# GIT
sudo git config --system user.name 'Wiley Young'
sudo git config --system user.email '84648683+wileyhy@users.noreply.github.com'
sudo git config --system core.editor 'vim'
sudo git config --system core.pager '/usr/bin/less'
sudo git config --system help.autocorrect '300'
sudo git config --system init.defaultBranch 'main'

## re Gnupg
sudo git config --system --unset gpg.format
sudo git config --system commit.gpgsign 'true'
sudo git config --system gpg.program 'gpg2'
sudo git config --system user.signingkey 'E287D0CF528591CE'

## Console colors
## git ui colors: normal black red green yellow blue magenta cyan white
## git ui attributes: bold dim ul (underline blink reverse
sudo git config --system color.diff 'always'
sudo git config --system color.diff.meta 'blue black bold'
sudo git config --system color.interactive 'always'
sudo git config --system color.status 'always'
sudo git config --system color.ui 'true'
sudo git config --system color.ui 'auto'

## .gitmessage and .gitignore
gitmesg=/etc/.gitmessage_system
gitignr=/etc/.gitignore_system

## (message)
tmpf="$(mktemp)"
cat << EOF > "${tmpf}"
Subject line (try to keep under 50 characters)

Multi-line description of commit,
feel free to be detailed.

[Ticket: X]
EOF
sudo tee -- "${gitmesg}" <<< "${tmpf}" > /dev/null
rm -f -- "${tmpf}"
unset tmpf

## (ignore)
tmpf="$(mktemp)"
cat << EOF > "${tmpf}"
*~
.*.swp
.DS_Store
EOF
sudo tee -- "${gitignr}" <<< "${tmpf}" > /dev/null
rm -f -- "${tmpf}"
unset tmpf

sudo git config --system commit.template "${gitmesg}"
sudo git config --system core.excludesfile "${gitignr}"

## Permissions
files=(/etc/git* /etc/.git*)
for f in "${files[@]}"; do
  sudo chmod 0604 -- "${f}"
done
unset files f

## Copy root-user files to $USER
for f in "${gitmesg}" "${gitignr}"; do
  sudo rsync -ca -- "${f}" "/home/${USER}"
  sudo chown 1000:1000 -- "/home/${USER}/${f##*/}"
  chmod 0400 "/home/${USER}/${f##*/}"
done
unset f

## Rename files
files=(/home/*/.git*_system)
for f in "${files[@]}"; do
  sudo mv -f -- "${f}" "${f%_system}"
done
unset files f 

## make and change into directories
umask 077

if [[ ! -d "${dev_d}" ]]; then
  mkdir -p "${dev_d}" \
    || exit "${LINENO}"
fi

### Note: in order to clone into any repo, and keep multiple repos
### separate, `cd` is required
cd "${dev_d}" \
  || exit "${LINENO}"

# TODO:
#   Parse output of `gh config list`

# GH
gh config set editor 'vim'
gh config set browser 'firefox'
gh config set pager 'less'
gh config set git_protocol 'ssh' --host 'github.com'

## Use GitHub CLI as a credential helper
gh auth setup-git --hostname 'github.com'

# Log in
if ! gh auth status 2> /dev/null; then
  gh auth login --git-protocol 'ssh' --hostname 'github.com' --scopes 'admin:public_key,read:gpg_key' --web \
    || exit "${LINENO}"
fi

# TODO:
#   Parse `gh auth status`, re add'l scopes
#gh auth refresh --hostname 'github.com' --scopes 'admin:public_key,read:gpg_key'

# Clone repo
if [[ ! -d ./"${repo_nm}" ]] \
  || [[ ! -f ./"${repo_nm}"/README.md ]]; 
then
  git clone -o 'github' https://github.com/wileyhy/"${repo_nm}" \
    || exit "${LINENO}"
fi

## Get SSH & GPG keys
gh ssh-key list
gh gpg-key list

## Review auth
gh auth status --show-token

# SSH
sudo chown 1000:1000 ~/.ssh \
|| "${LINENO}"
sudo chmod -R 700 ~/.ssh

if [[ -e ~/.ssh/config ]]; then
  if ! grep -q 'ForwardAgent yes' ~/.ssh/config; then
    cat << EOF > ~/.ssh/config
      Host github.com
      ForwardAgent yes
EOF
  fi
fi

[[ -e /etc/ssh_config ]] \
  && exit "${LINENO}"

### Bug? not necc to restart ssh-agent if both of these vars exist?
if [[ -z "${SSH_AUTH_SOCK}" ]] \
  || [[ -z "${SSH_AGENT_PID}" ]];
then

  # shellcheck disable=SC2154
  ps_o="$(ps aux)"
  awk_o="$(awk '$0 ~ /ssh-agent/ && $0 !~ /startx/ { print $2 }' \
    <<<"${ps_o:?}")"
  if [[ -n "${awk_o}" ]]; then 
    mapfile -t ssh_agent_pids <<< "${awk_o:?}"
  fi

  if [[ "${#ssh_agent_pids[@]}" -gt 0 ]]; then
  case "${#ssh_agent_pids[@]}" in
    0)  : ;;
    1)  if [[ -v SSH_AGENT_PID ]]; then
          ssh-agent -k
        else
          kill "${ssh_agent_pids[*]}"
        fi ;;
    *)  for p in "${ssh_agent_pids[@]}"; do
          kill "${p}"
        done ;;
  esac
  fi

  ssh_agent_o="$(ssh-agent -s)"
  eval "${ssh_agent_o}"

  ssh-add ~/.ssh/id_ed25519
  ssh-add -L
  ssh -T git@github.com
fi

# GPG
sudo chown 1000:1000 ~/.gnupg \
  || exit "${LINENO}"
sudo chmod -R 700 ~/.gnupg

### shellcheck disable=SC2009
if grep -qE '[g]pg-a.*daemon' <<< "${ps_o}"; then
gpgconf --kill gpg-agent
fi

gpg-connect-agent /bye

GPG_TTY="$(tty)"
export GPG_TTY

# Remind user of commands for the interactive shell
printf '\n\t Now run this command: \n'
printf '\n\t cd %s/%s; git status \n\n' "${dev_d}" "${repo_nm}"
