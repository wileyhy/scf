#!/bin/env bash
# begin-1-

set -aCuTexo pipefail

## Notes
###   Online Git Pro book:
###     https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository

# Write to TTY
printf '%s - Executing %s: \n' "$(date +%H:%M:%S)" "$0"

  # <> Output all xtrace to file
  #   https://serverfault.com/questions/103501/how-can-i-fully-log-all-bash-scripts-actions
  #exec 3>&1 4>&2
  #trap 'set -; exec 2>&4 1>&3' EXIT HUP INT QUIT USR2 TERM
  #exec 1> ./Log_begin-1.txt 2>&1
  set -x

# Vars, etc
declare -n  nL=LINENO
export      nL LINENO
: "${PROMPT_COMMAND:=__vte_prompt_command}"
declare -n  nPC=PROMPT_COMMAND
export      nPC PROMPT_COMMAND

# re `set -u`
#   /etc/bashrc
BASHRCSOURCED='' export BASHRCSOURCED
PS1='' export PS1

#   /etc/profile.d/colorls.sh
USER_LS_COLORS='' export USER_LS_COLORS

#   /etc/profile.d/lang.sh
LC_ALL='' export LC_ALL

dns_srv_1=8.8.8.8
dns_srv_2=75.75.75.75

# Functions
er_x(){
  local exit_code="$?"
  echo -e Error: "$@" >&2
  exit "${exit_code}"
}
export -f er_x
declare -ft er_x

# Regular users only
if [[ "${UID}" == 0 ]]
then
  printf '\n\t Must be a regular user and use sudo. \n\n'
  exit "${nL}"
else
  sudo -v ||
    er_x "${nL}"
fi

# Network & time
function test_dns(){
  sudo ping -c 1 -W 15 "$1" > /dev/null 2>&1
}
export -f test_dns
declare -ft test_dns

if ! test_dns "${dns_srv_1}" ||
  ! test_dns "${dns_srv_2}"
then
  printf '\n\tAttempting to connect...\n\n'

  # this command appears to be idempotent
  sudo systemctl start NetworkManager.service
  wait -f
  sleep 15

  if ! test_dns "${dns_srv_1}" ||
    ! test_dns "${dns_srv_2}"
  then
    printf '\n\tGiving up; Exiting.\n\n'
    exit "${nL}"
  else
    printf '\n\tSuccess!\n\n'
  fi
fi

sudo timedatectl set-local-rtc 0
sudo timedatectl set-timezone America/Vancouver
sudo systemctl start chronyd.service
sudo chronyc makestep > /dev/null

# Bash
## .bashrc
umask 071 # for bashrc specifically
unset "${!bashrc_str_@}" files ff ss oldPromptCmd bashrc_strings
unset -f prompt_cmd_fn

  # <>
  declare -p nPC PROMPT_COMMAND
  #exit "${nL}"

# If PROMPT_COMMAND doesn't exist, or if PROMPT_COMMAND exists and is an array...
# shellcheck disable=SC2128
if [[ -z "${!nPC}" ]] ||
  declare -p nPC |
  awk '$2 !~ /a/{ec=0} /^Match/{exit} END{exit !ec}'

  # ...then create an array, or append a command to the end of the existing array, resetting
  #+ terminal colors...
  then
    nPC+=( "printf %b '\033[m'" )

# ...otherwise it's a string. If there's just one command therein, (ie, only one [and prior
#+ known] value... or if PROMPT_COMMAND doesn't contain any newlines,
#+ semicolons or line continuations...)
elif [[ ${!nPC} == __vte_prompt_command ]] ||
  ! [[ "$( declare -p "${nPC}" )" =~ (\\n|;|\\\n) ]]

  # ...then the contents of PROMPT_COMMAND as one string, consisting
  #+ of one command, can be added as-is into a index-value of an array.
  #+ So let's define that value in the variable oldPromptCmd.
  then
    oldPromptCmd="$(
      printf '%s\n' "$nPC"
    )"

# ...otherwise, there are likely multiple commands within the string
#+ formerly known as PROMPT_COMMAND, so redefine all of them together
#+ as one function, storing that function also in the varaible
#+ oldPromptCmd.
else
  eval "$(
    printf 'function prompt_cmd_fn(){\n  %b\n}\n' "$nPC"
  )"
  export -f prompt_cmd_fn
  oldPromptCmd="$(
    declare -F prompt_cmd_fn
  )"
fi

# ...lastly redefine PROMPT_COMMAND to include that new function
#+ as ell as our additional command for resetting terminal colors.
if [[ -n "${oldPromptCmd}" ]]
then
  export oldPromptCmd
  unset -v nPC
  nPC=( [0]="${oldPromptCmd}" [1]="printf %b '\033[m'" )
elif [[ -z "$( printf '%s' "${!nPC}" )" ]]
  then
    nPC=( "printf %b '\033[m'" )
    er_x "${nL}: PROMPT_COMMAND should have been defined already"
fi
unset -n nPC
export PROMPT_COMMAND

# shellcheck disable=SC2034,SC2034,SC2016
declare -A bashrc_strings
bashrc_strings=(
  [$'# EDITOR']=$'EDITOR=/usr/bin/vim\n'
  [$'# BROWSER']=$'BROWSER=/usr/bin/firefox\n'
  [$'# function rm']=$'rm(){\n  [[ "$#@" -eq 0 ]] &&\n    return 1;\n  local Dd;\n  Dd=~/rm.d;\n  if ! [[ -e "$Dd" ]];\n  then\n    mkdir -m 0700 -v "$Dd" ||\n      return 2;\n  fi;\n  mv -nv --strip-trailing-slashes --suffix="$( date +%s )" -- "$@" "$Dd" ||\n    return 3;\n}\n'
  [$'# PROMPT_COMMAND']="$( declare -p PROMPT_COMMAND )"$'\n'
)

unset files ff ss
files=(/root/.bashrc /home/*/.bashrc)

for ff in "${files[@]}"
do
  # see `man bash`, Parameter Expansions
  for ss in "${!bashrc_strings[@]}"
  do
    if ! sudo grep -qe "${ss}" -- "${ff}"
    then

      # these commands appear to be idempotent
      sudo cp -a -- "${ff}" "${ff}~" ||
        er_x "${LINENO}"
      {
        printf '%s\n%s\n' "${ss}" "${bashrc_strings[$ss]}" |
          sudo tee -a -- "${ff}" > /dev/null
      } ||
        er_x $LINENO
    fi
  done
done
unset "${!bashrc_str_@}" files ff ss

# shellcheck source=/home/liveuser/.bashrc
source ~/.bashrc

# Vim
wc_out="$(
  sudo wc /root/.vimrc 2>&1
  )"
if [[ "${wc_out}" != '11  42 346 /root/.vimrc' ]]
then
  umask 177 # for vimrc specifically
  tmpf="$(
    mktemp 2>&1 ||
      er_x "${LINENO}"
  )"
  if ! [[ -s "${tmpf}" ]]
  then
    cat <<- EOF >> "${tmpf}"
    " per google:
    set number

    " per https://stackoverflow.com/questions/234564/tab-key-4-spaces-and-auto-indent-after-curly-braces-in-vim
    filetype plugin indent on
    " show existing tab with 2 spaces width
    set tabstop=2
    " when indenting with '>', use 2 spaces width
    set shiftwidth=2
    " On pressing tab, insert 2 spaces
    set expandtab
EOF

    # shellcheck disable=SC2024
    sudo tee /root/.vimrc < "${tmpf}" > /dev/null
    rm -f -- "${tmpf}" ||
      er_x "${nL}"
    unset tmpf
  else
    er_x "${LINENO}: file size cannot be zero"
  fi
fi
unset wc_out

## Copy root-user files to $USER
sudo rsync -ca /root/.vimrc "/home/${USER}"
sudo chown "${UID}:${UID}" "/home/${USER}/.vimrc"
chmod 0400 "/home/${USER}/.vimrc"

  # <>
  #exit "${nL}"
  #set -x

# Dnf
#   Note: the parameters are for organization
#   shellcheck disable=SC2086 #(info): Double quote to prevent globbin...
sudo dnf -qy install \
    ${for_fun:-}        angband \
    ${for_git:-}        git gh \
    ${for_bashdb:-}     bash-devel make autoconf \
    ${for_linting:-}    ShellCheck kcov shfmt patch strace ltrace \
    ${for_duh:-}        info ncdu \
    ${for_strings:-}    binutils \
    ${for_lockfile:-}   procmail \
    ${for_firefox:-}    mozilla-noscript mozilla-privacy-badger \
                          mozilla-https-everywhere \
    ${for_unicode:-}    xterm ||
  er_x "${nL}"

  #$for_gcov           gcc \
  #$for_internet       lynx chromium \
  #$for_db             libreoffice-calc \
  #$for_os_dnlds       debian-keyring \
  #$for_hollywood      git-fame # ðŸ™„
  #$for_later_maybe    memstomp bpftrace gdb valgrind python3-ptrace \
  #                      fatrace apitrace x11trace memstrack kernelshark

sudo dnf -qy upgrade bash bash-completion ||
  er_x "${nL}"
sudo dnf -qy --security upgrade ||
  er_x "${nL}"

  # <>
  #exit "${nL}"
  #set -x

# Restart any processes that may need to be restarted

# Let the previous DNF processes finish
pidwait dnf

# Get a list of any such PIDs
a_pids=()
export a_pids
function get_pids(){ :
  local dnf_o
  local -I a_pids
  dnf_o="$(sudo dnf needs-restarting 2>&1 ||
    er_x "${nL}")"
  mapfile -t a_pids < <(
    awk '{ print $1 }' <<< "${dnf_o}" |
      grep -E ^'[0-9]*'$
  )
}
export -f get_pids
declare -ft get_pids

# TODO: a process lock on kill loop

# ISSUE: this kill loop usually kills the user session, including the
# terminal and the script, so the script usually needs to be run
# multiple times.

# this loop sb a separate script / heredoc that gets `exec`'d or bg'd and disowned

while true
do
  get_pids

    # <>
    #declare -p a_pids
    sleep 1
    #exit "${nL}"
    #set -x

  # if any PIDs were found...
  # ...and if there are any PIDs other than PID 1...
  if [[ -n "${a_pids[*]:0:1}" ]] &&
    [[ "${a_pids[*]:0:1}" != '1' ]]
  then

    # (for readability)
    n="${#a_pids[@]}"

    # Print some info & wait for it to be read
    printf '\n\t PID-s, count: %d\n\n' "${n}"

      # <>
      sleep 1

    # for each signal and for each PID...
    for p in "${!a_pids[@]}"
    do

      # (for readability)
      :;: 'loop';:
      q="${a_pids[p]}"

      [[ "${q}" -eq 1 ]] &&
        continue

      for s in HUP USR1 TERM KILL
      do

        sleep 3

        # ...if the PID is still running...
        if ps h -q "${q}" > /dev/null
        then

          # ...then `kill` it with the according per-loop SIGNAL...

          #   NOTE: the exit codes for `kill` only indicate whether
          #+ or not the target PIDs existed, rather than whether the
          #+ `kill` operation succeeded, per `info kill`.

          sudo env -i kill -s "${s}" "${q}" > /dev/null 2>&1 &
          wait -f
          sleep 1

          # ...and if the PID in question no longer exists, ie, if
          # the `kill` command succeeded, then unset the the current
          # array index number
          if ps h -q "${q}" > /dev/null 2>&1
          then
            continue
          else
            unset 'a_pids[p]'
            break 1
          fi
        else
          break 01
        fi
      done
    done
  else
    break 001
  fi
done
unset n s p q a_pids
a_pids=()
export a_pids

  # <>
  #exit "${nL}"
  #set -x

get_pids

if [[ -n "${a_pids[*]:0:8}" ]]
then
  for s in HUP USR1 USR2 TERM
  do

    for p in "${a_pids[@]}"
    do
      echo "$p"
      #set -x

      if ps h -q "${p}" > /dev/null
      then
        command -p kill -s "$s" "$p"
        wait -f
      fi
      ps h -q "${p}" > /dev/null
      echo -e did \\x60kill\\x60 terminate the process?: $?
      set -
      sleep 1
    done
    unset p

    unset a_pids
    a_pids=()
    export a_pids
    get_pids

    if [[ -n "${a_pids[*]:0:8}" ]]
    then
      continue
    else
      break
    fi

  done
fi
unset p s a_pids

  # <>
  #exit "${nL}"
  #set -x

if [[ -n "${a_pids[*]:0:8}" ]]
then
  n="${#a_pids[@]}"

  # ...if there are any PIDs other than PID 1...
  if [[ "${a_pids[*]}" -eq '1' ]]
  then
    printf '\n\t The remaining "needs-restarting" process (PID 1) cannot be '
    printf 'restarted \n\t without rebooting the machine.\n'
    printf '\n\t %s \n\n' "${a_pids[@]}"
  fi
fi

if ! ping -4qc1 8.8.8.8 2> /dev/null >&2
then
  sudo systemctl restart NetworkManager.service ||
    er_x "${nL}"
fi

# Write to TTY and exit
kill -s USR2 "$$"
printf '%s - Done\n' "$(date +%H:%M:%S)"
exit 00

